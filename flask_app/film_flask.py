from flask import Flask, jsonify, render_template, requestimport pymysql, jsonpickleapp = Flask(__name__)application = appclass FilmSearch(object):    def __init__(self):        self.film_id = None        self.film_title = None        def film_id(self):            return self.film_id        def film_id(self, value):            self.film_id = value        def film_title(self):            return self.film_title        def film_title(self, value):            self.film_title = valueclass Film(object):    def __init__(self):        self.film_id = None        self.film_title = None        self.film_tagline = None        self.film_overview = None        self.film_poster_url = None        self.film_release_date = None        self.film_budget = None        self.film_revenue = None        self.film_runtime = None        self.film_status = None        self.film_vote_average = None        self.film_vote_count = None        self.film_trailer_url = None        self.film_trailer_view_count = None        self.film_trailer_like_count = None        self.film_trailer_dislike_count = None        self.genres = []        self.actors = []        self.directors = []        self.production_companies = []        def film_id(self):            return self.film_id        def film_id(self, value):            self.film_id = value        def film_title(self):            return self.film_title        def film_title(self, value):            self.film_title = value        def film_tagline(self):            return self.film_tagline        def film_tagline(self, value):            self.film_tagline = value        def film_overview(self):            return self.film_overview        def film_overview(self, value):            self.film_overview = value        def film_poster_url(self):            return self.film_poster_url        def film_poster_url(self, value):            self.film_poster_url = value        def film_release_date(self):            return self.film_release_date        def film_release_date(self, value):            self.film_release_date = value        def film_budget(self):            return self.film_budget        def film_budget(self, value):            self.film_budget = value        def film_revenue(self):            return self.film_revenue        def film_revenue(self, value):            self.film_revenue = value        def film_runtime(self):            return self.film_runtime        def film_runtime(self, value):            self.film_runtime = value        def film_status(self):            return self.film_status        def film_status(self, value):            self.film_status = value        def film_vote_average(self):            return self.film_vote_average        def film_vote_average(self, value):            self.film_vote_average = value        def film_vote_count(self):            return self.film_vote_count        def film_vote_count(self, value):            self.film_vote_count = value        def film_trailer_url(self):            return self.film_trailer_url        def film_trailer_url(self, value):            self.film_trailer_url = value        def film_trailer_view_count(self):            return self.film_trailer_view_count        def film_trailer_view_count(self, value):            self.film_trailer_view_count = value        def film_trailer_like_count(self):            return self.film_trailer_like_count        def film_trailer_like_count(self, value):            self.film_trailer_like_count = value        def film_trailer_dislike_count(self):            return self.film_trailer_dislike_count        def film_trailer_dislike_count(self, value):            self.film_trailer_dislike_count = value        def actors(self):            return self.actors        def actors(self, value):            self.actors.append(value)class Genre(object):    def __init__(self):        self.genre_id = None        self.genre_name = None    def actor_id(self):        return self.actor_id    def genre_id(self, value):        self.genre_id = value    def genre_name(self):        return self.genre_name    def genre_name(self, value):        self.genre_name = valueclass Actor(object):    def __init__(self):        self.actor_id = None        self.actor_name = None        self.actor_pic_url = None        self.actor_character = None    def actor_id(self):        return self.actor_id    def actor_id(self, value):        self.actor_id = value    def actor_name(self):        return self.actor_name    def actor_name(self, value):        self.actor_name = value    def actor_pic_url(self):        return self.actor_pic_url    def actor_pic_url(self, value):        self.actor_pic_url = value    def actor_character(self):        return self.actor_character    def actor_character(self, value):        self.actor_character = valueclass Director(object):    def __init__(self):        self.director_id = None        self.director_name = None        self.director_pic_url = None    def actor_id(self):        return self.director_id    def actor_id(self, value):        self.director_id = value    def actor_name(self):        return self.director_name    def actor_name(self, value):        self.director_name = value    def actor_pic_url(self):        return self.director_pic_url    def actor_pic_url(self, value):        self.director_pic_url = valueclass Production_Company(object):    def __init__(self):        self.production_company_id = None        self.production_company_name = None    def actor_id(self):        return self.production_company_id    def actor_id(self, value):        self.production_company_id = valuedef queryDb(sqlQuery):    db = pymysql.connect(host='kanesmall.co.uk', user='kanesmal', password='wj5Gy%EE44#iK@j1', db='kanesmal_training_data', charset='utf8')    cursor = db.cursor()    cursor.execute(sqlQuery)    cursor = cursor.fetchall()    db.commit() # Save changes    db.close() # Disconnect from the server    return cursor@app.route("/")def index():    return render_template('index.html')@app.route("/films", methods=['GET'])def getFilms():    query = request.args['query']    sqlQuery = "SELECT film_id, film_title FROM films WHERE film_title LIKE '%" + query + "%';"    search = queryDb(sqlQuery)    listOfFilmSearchOBJs = []    for film in search:        filmSearchOBJ = FilmSearch()        filmSearchOBJ.film_id = film[0]        filmSearchOBJ.film_title = film[1]        listOfFilmSearchOBJs.append(filmSearchOBJ)    return jsonpickle.encode(listOfFilmSearchOBJs, unpicklable=False)@app.route("/films/<int:film_id>", methods=['GET'])def getFilm(film_id):    sqlQuery1 = "SELECT * FROM films WHERE film_id = " + str(film_id) + ";"    film = queryDb(sqlQuery1)    sqlQuery2 = "SELECT genres.* FROM films INNER JOIN film_genres ON film_genres.film_id = films.film_id INNER JOIN genres ON film_genres.genre_id = genres.genre_id WHERE films.film_id = " + str(film_id) + ";"    genres = queryDb(sqlQuery2)    sqlQuery3 = "SELECT actors.*, film_actors.actor_character FROM films INNER JOIN film_actors ON film_actors.film_id = films.film_id INNER JOIN actors ON film_actors.actor_id = actors.actor_id WHERE films.film_id = " + str(film_id) + ";"    actors = queryDb(sqlQuery3)    sqlQuery4 = "SELECT directors.* FROM films INNER JOIN film_directors ON film_directors.film_id = films.film_id INNER JOIN directors ON film_directors.director_id = directors.director_id WHERE films.film_id = " + str(film_id) + ";"    directors = queryDb(sqlQuery4)    sqlQuery5 = "SELECT production_companies.* FROM films INNER JOIN film_production_companies ON film_production_companies.film_id = films.film_id INNER JOIN production_companies ON film_production_companies.production_company_id = production_companies.production_company_id WHERE films.film_id = " + str(film_id) + ";"    production_companies = queryDb(sqlQuery5)    filmOBJ = Film()    filmOBJ.film_id = film[0][0]    filmOBJ.film_title = film[0][1]    filmOBJ.film_tagline = film[0][2]    filmOBJ.film_overview = film[0][3]    filmOBJ.film_poster_url = film[0][4]    filmOBJ.film_release_date = film[0][5]    filmOBJ.film_budget = film[0][6]    filmOBJ.film_revenue = film[0][7]    filmOBJ.film_runtime = film[0][8]    filmOBJ.film_status = film[0][9]    filmOBJ.film_vote_average = film[0][10]    filmOBJ.film_vote_count = film[0][11]    filmOBJ.film_trailer_url = film[0][12]    filmOBJ.film_trailer_view_count = film[0][13]    filmOBJ.film_trailer_like_count = film[0][14]    filmOBJ.film_trailer_dislike_count = film[0][15]    listOfGenreOBJs = []    listOfActorOBJs = []    listOfDirectorOBJs = []    listOfProductionCompanyOBJs = []    for genre in genres:        genreOBJ = Genre()        genreOBJ.genre_id = genre[0]        genreOBJ.genre_name = genre[1]        listOfGenreOBJs.append(genreOBJ)    for item in listOfGenreOBJs:        filmOBJ.genres.append(item)    for actor in actors:        actorOBJ = Actor()        actorOBJ.actor_id = actor[0]        actorOBJ.actor_name = actor[1]        actorOBJ.actor_pic_url = actor[2]        actorOBJ.actor_character = actor[3]        listOfActorOBJs.append(actorOBJ)    for item in listOfActorOBJs:        filmOBJ.actors.append(item)    for director in directors:        directorOBJ = Director()        directorOBJ.director_id = director[0]        directorOBJ.director_name = director[1]        directorOBJ.director_pic_url = director[2]        listOfDirectorOBJs.append(directorOBJ)    for item in listOfDirectorOBJs:        filmOBJ.directors.append(item)    for production_company in production_companies:        production_companyOBJ = Production_Company()        production_companyOBJ.production_company_id = production_company[0]        production_companyOBJ.production_company_name = production_company[1]        listOfProductionCompanyOBJs.append(production_companyOBJ)    for item in listOfProductionCompanyOBJs:        filmOBJ.production_companies.append(item)    return jsonpickle.encode(filmOBJ, unpicklable=False)if __name__ == "__main__":    app.run()